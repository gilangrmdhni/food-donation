function StepOne({ stepForm }) {
    const router = useRouter();
    const [eventName, setEventName] = useState('');
    const [TypeEvent, setTypeEvent] = useState('');
    const [Tanggal, setTanggal] = useState('');
    const [Waktu, setWaktu] = useState('');

    const handleEventNameChange = (event) => {
        setEventName(event.target.value);
    };

    const handleTypeEventChange = (event) => {
        setTypeEvent(event.target.value);
    };

    const handleTanggalChange = (event) => {
        setTanggal(event.target.value);
    };

    const handleWaktuChange = (event) => {
        setWaktu(event.target.value);
    };

    const handleSubmit = (e) => {
        e.preventDefault();

        if (!eventName || !TypeEvent || !Tanggal || !Waktu) {
            window.alert('All fields are required');
            return;
        }

        // Assuming you have a function to update form data from context
        // UpdateFormDataFunction({ eventName, TypeEvent, Tanggal, Waktu });

        // Reset form after submit
        setEventName('');
        setTypeEvent('');
        setTanggal('');
        setWaktu('');

        // Redirect to the next step
        router.push(`/creatcampaign?step=${parseInt(stepForm) + 1}`);
    };

    return (
        <>
            <ol className="flex justify-center mb-4 sm:mb-5 w-full p-2">
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block  after:border-b after:border-4 after:border-primary`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-primary`}
                    iconCss={`w-4 h-4 text-white lg:w-6 lg:h-6 `}
                    iconName={"CalendarEvent"}
                />
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block   after:border-b after:border-4 after:border-gray-700`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-gray-700`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"Map"}
                />
                <RoutStep
                    liCss={`flex items-center`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-gray-700`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"CalendarEvent"}
                />
            </ol>
            <form className="p-2 mt-10 w-full" onSubmit={handleSubmit}>
                <div className="mb-2">
                    <label htmlFor="eventName" className="text-sm font-medium text-gray-900">
                        Event Name
                    </label>
                    <InputForm
                        cssInput="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 m-1"
                        label="eventName"
                        type="text"
                        name="eventName"
                        value={eventName}
                        onChange={handleEventNameChange}
                        placeholder="Event Name"
                    />
                </div>

                <div className="mb-2">
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                        Type Event:
                        <select
                            name="TypeEvent"
                            value={TypeEvent}
                            onChange={handleTypeEventChange}
                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 m-1"
                        >
                            <option value="TI">TI</option>
                            <option value="SI">SI</option>
                            <option value="BD">BD</option>
                        </select>
                    </label>
                </div>

                <div className="mb-2">
                    <label htmlFor="Tanggal" className="text-sm font-medium text-gray-900">
                        Tanggal
                    </label>
                    <InputForm
                        cssInput="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 m-1"
                        label="Tanggal"
                        type="date"
                        name="Tanggal"
                        value={Tanggal}
                        onChange={handleTanggalChange}
                        placeholder="Tanggal"
                    />
                </div>
                <div className="mb-2">
                    <label htmlFor="Waktu" className="text-sm font-medium text-gray-900">
                        Waktu
                    </label>
                    <InputForm
                        cssInput="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 m-1"
                        label="Waktu"
                        type="time"
                        name="Waktu"
                        value={Waktu}
                        onChange={handleWaktuChange}
                        placeholder="Waktu"
                    />
                </div>

                <div className="grid gap-4 content-center">
                    <button
                        type="submit"
                        className="text-white bg-primary hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-full text-sm w-full sm:w-auto px-5 py-2.5 text-center"
                    >
                        Submit
                    </button>
                </div>
            </form>
        </>
    );
}




<ol className="flex justify-center mb-4 sm:mb-5 w-full p-2">
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block  after:border-b after:border-4 after:border-primary`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-primary`}
                    iconCss={`w-4 h-4 text-white lg:w-6 lg:h-6 `}
                    iconName={"CalendarEvent"}
                />
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block   after:border-b after:border-4 after:border-gray-700`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-gray-700`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"Map"}
                />
                <RoutStep
                    liCss={`flex items-center`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-gray-700`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"CalendarEvent"}
                />
            </ol>

=================Step3 camp
<ol className="flex justify-center mb-4 sm:mb-5 w-full p-2">
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block  after:border-b after:border-4 after:border-primary`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-primary`}
                    iconCss={`w-4 h-4 text-white lg:w-6 lg:h-6 `}
                    iconName={"CalendarEvent"}
                />
                <RoutStep
                    liCss={`flex w-20 items-center after:content-[''] after:w-full after:h-1 after:inline-block   after:border-b after:border-4 after:border-primary`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-primary`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"Map"}
                />
                <RoutStep
                    liCss={`flex items-center`}
                    divCss={`flex items-center justify-center w-10 h-10  rounded-full lg:h-12 lg:w-12 shrink-0 bg-primary`}
                    iconCss={`w-4 h-4 lg:w-6 lg:h-6 text-white`}
                    iconName={"CalendarEvent"}
                />
            </ol>


import { useRouter } from 'next/router';
import styles from "@/styles/Login.module.css";
import { useState, useEffect } from 'react'; // Import useEffect
import axios from 'axios';
import Swal from 'sweetalert2';

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const router = useRouter();

    useEffect(() => {
        const role = sessionStorage.getItem('role');
        const token = sessionStorage.getItem('token');

        if (role === 'detonator' && token) {
            router.push('/detonator');
        }
    }, []);

    const handleSubmit = async (event) => {
        event.preventDefault();

        try {
            const response = await axios.post(
                'https://api.foodia-dev.nuncorp.id/api/v1/auth/login',
                {
                    email: email,
                    password: password,
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': 'Bearer YOUR_ACCESS_TOKEN_HERE'
                    }
                }
            );

            const { fullname, phone, email, role, token } = response.data.body;

            // Store user information in session storage
            sessionStorage.setItem('fullname', fullname);
            sessionStorage.setItem('phone', phone);
            sessionStorage.setItem('email', email);
            sessionStorage.setItem('role', role);
            sessionStorage.setItem('token', token);

            Swal.fire({
                icon: 'success',
                title: 'Login Successful!',
                text: 'Redirecting to the dashboard...',
                showConfirmButton: false,
                timer: 2000,
            });

            setTimeout(() => {
                router.push('/detonator');
            }, 2000);
        } catch (error) {
            console.log(error);

            Swal.fire({
                icon: 'error',
                title: 'Login Failed',
                text: 'Please check your email and password and try again.',
            });
        }
    };


    return (
        <div className="container mx-auto mt-24 bg-white h-96 text-primary">
            <div className="flex justify-center ">
                <h1 className='text-3xl  font-bold'>FOODIA</h1>
            </div>
            <div className="flex justify-center ">
                <h1 className='text-xl font-bold'>Silahkan Login</h1>
            </div>

            <form className='p-2 mt-20' >
                <div className="">
                    <label for="email" className="block  text-sm font-medium text-gray-900 dark:text-white">Your email</label>
                    <input onChange={(e) => setEmail(e.target.value)} type="email" id="email" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 " placeholder="name@flowbite.com" required />
                </div>
                <div className="">
                    <label for="password" className="block  text-sm font-medium text-gray-900 dark:text-white">Your password</label>
                    <input onChange={(e) => setPassword(e.target.value)} type="password" id="password" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 " required />
                </div>
                <div className="flex items-start mb-4">

                    <label for="remember" className="ms-2 text-sm font-medium text-gray-900 dark:text-gray-300">Forgot password?</label>
                </div>
                <div className=" grid gap-4 content-center">
                    <button onClick={handleSubmit} type="submit" className="text-white bg-primary hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-full text-sm w-full sm:w-auto px-5 py-2.5 text-center ">Submit</button>
                </div>
            </form>

        </div>
    );
}

export default LoginPage;


const otp = {
            email: 'suryaharis22@gmail.com',
            code: newCodes.join(''),
        };

        console.log('otp', otp);


 // if (newCodes.every((code) => code.length === 1)) {
        //     const enteredCode = parseInt(newCodes.join(''));
        //     if (enteredCode === otp) {
        //         // setRegistrasiDetonator(undefined);
        //         const imageUrl = "/img/illustration/checklist.png";
        //         SweetAlert({
        //             title: "",
        //             text: "Akun Berhasil Di Buat",
        //             imageUrl,
        //             imageWidth: 200,
        //             imageHeight: 200,
        //             imageAlt: "Custom image",
        //             width: 350,
        //         });
        //         router.push('/home');
        //     } else {
        //         // alert('Invalid OTP. Please try again.');
        //         console.log('data registrasi', registrasiDetonator);
        //         setCodes(['', '', '', '', '', '']);
        //     }
        // }

// const enteredCode = parseInt(codes.join(''));

        // if (enteredCode === otp) {
        //     setRegistrasiDetonator(undefined);
        //     const imageUrl = "/img/illustration/checklist.png";
        //     SweetAlert({
        //         title: "",
        //         text: "Akun Berhasil Di Buat",
        //         imageUrl,
        //         imageWidth: 200,
        //         imageHeight: 200,
        //         imageAlt: "Custom image",
        //         width: 350,
        //     });
        //     router.push('/home');
        // } else {
        //     // alert('Invalid OTP. Please try again.');
        //     console.log('data registrasi', registrasiDetonator);
        //     setCodes(['', '', '', '', '', '']);
        // }

        img={data.images.length > 0 ? `${process.env.NEXT_PUBLIC_URL_STORAGE}${data.images[0].image_url}` : '/img/default-image.png'}